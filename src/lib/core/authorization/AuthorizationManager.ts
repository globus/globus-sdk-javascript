import type IConfig from 'js-pkce/dist/IConfig';

import {
  Token,
  TokenResponse,
  getAuthorizationEndpoint,
  getTokenEndpoint,
  isGlobusAuthTokenResponse,
} from '../../services/auth/index.js';

import { createStorage, getStorage } from '../storage/index.js';
import { log } from '../logger.js';

import { Event } from './Event.js';
import { RedirectTransport } from './RedirectTransport.js';
import { TokenLookup } from './TokenLookup.js';

import {
  isConsentRequiredError,
  isAuthorizationRequirementsError,
  AuthorizationRequirementsError,
  ConsentRequiredError,
} from '../errors.js';

export type AuthorizationManagerConfiguration = {
  client_id: IConfig['client_id'];
  requested_scopes: IConfig['requested_scopes'];
  redirect_uri: IConfig['redirect_uri'];
};

/**
 * @experimental
 */
export class AuthorizationManager {
  #transport!: RedirectTransport;

  configuration: AuthorizationManagerConfiguration;

  #authenticated = false;

  /**
   * The `AuthorizationManager` is consdiered `authenticated` if it has a valid Globus Auth token.
   * It does not necessarily mean that it has a valid token for a specific resource server.
   */
  get authenticated() {
    return this.#authenticated;
  }

  /**
   * Set the authenticated state and emit the `authenticated` event.
   */
  set authenticated(value: boolean) {
    this.#authenticated = value;
    this.#emitAuthenticatedState();
  }

  tokens: TokenLookup;

  events = {
    /**
     * Emitted when the authenticated state changes.
     * @event AuthorizationManager.events#authenticated
     * @type {object}
     * @property {boolean} isAuthenticated - Whether the `AuthorizationManager` is authenticated.
     * @property {TokenResponse} [token] - The token response if the `AuthorizationManager` is authenticated.
     */
    authenticated: new Event<
      'authenticated',
      {
        /**
         * Whether the `AuthorizationManager` is authenticated.
         * @see {@link AuthorizationManager.authenticated}
         */
        isAuthenticated: boolean;
        token?: TokenResponse;
      }
    >('authenticated'),
    /**
     * Emitted when the user revokes their authentication.
     * @event AuthorizationManager.events#revoke
     */
    revoke: new Event('revoke'),
  };

  constructor(configuration: AuthorizationManagerConfiguration) {
    /**
     * @todo Add support for passing in an alternative storage mechanism.
     */
    createStorage('localStorage');
    if (!configuration.client_id) {
      throw new Error('You must provide a `client_id` for your application.');
    }
    this.configuration = {
      ...configuration,
      /**
       * Inject the `openid`, `profile`, `email`, and `offline_access` scopes by default.
       */
      requested_scopes: `${configuration.requested_scopes} openid profile email offline_access`,
    };

    this.tokens = new TokenLookup({
      manager: this,
    });
    this.startSilentRenew();
  }

  startSilentRenew() {
    log('debug', 'AuthorizationManager.startSilentRenew');
    this.#bootstrapFromStorageState();
    // @todo Iterate through all tokens and refresh them.
  }

  hasGlobusAuthToken() {
    return this.getGlobusAuthToken() !== null;
  }

  getGlobusAuthToken() {
    const entry = getStorage().get(`${this.configuration.client_id}:auth.globus.org`);
    return entry ? JSON.parse(entry) : null;
  }

  #checkAuthorizationState() {
    log('debug', 'AuthorizationManager.#checkAuthorizationState');
    if (this.hasGlobusAuthToken()) {
      this.authenticated = true;
    }
  }

  async #bootstrapFromStorageState() {
    log('debug', 'AuthorizationManager.bootstrapFromStorageState');
    this.#checkAuthorizationState();
  }

  async #emitAuthenticatedState() {
    const isAuthenticated = this.authenticated;
    const token = this.getGlobusAuthToken() ?? undefined;
    await this.events.authenticated.dispatch({
      isAuthenticated,
      token,
    });
  }

  /**
   * Reset the authenticated state and clear all tokens from storage.
   * This method **does not** emit the `revoke` event. If you need to emit the `revoke` event, use the `AuthorizationManager.revoke` method.
   */
  reset() {
    /**
     * @todo This should be made specific to the keys generated by the `AuthorizationManager`.
     */
    getStorage().clear();
    this.authenticated = false;
  }

  #buildTransport(overrides?: Partial<ConstructorParameters<typeof RedirectTransport>[0]>) {
    return new RedirectTransport({
      client_id: this.configuration.client_id,
      authorization_endpoint: getAuthorizationEndpoint(),
      token_endpoint: getTokenEndpoint(),
      redirect_uri: this.configuration.redirect_uri,
      requested_scopes: this.configuration.requested_scopes,
      ...overrides,
    });
  }

  /**
   * Initiate the login process by redirecting to the Globus Auth login page.
   */
  login() {
    this.reset();
    /**
     * In the future, it's possible that we may want to support different types of transports.
     */
    const transport = this.#buildTransport();
    transport.send();
  }

  async handleCodeRedirect() {
    const response = await this.#buildTransport().getToken();
    if (isGlobusAuthTokenResponse(response)) {
      this.addTokenResponse(response);
    }
  }

  /**
   * Handle an error response from a Globus service in the context of this `AuthorizationManager`.
   * This method will introspect the response and attempt to handle any errors that should result
   * in some additional Globus Auth interaction.
   * @param response - The error response from a Globus service.
   * @param execute - Whether to execute the handler immediately or return a function that can be executed later.
   */
  handleErrorResponse(response: Record<string, unknown>, execute?: true): void;
  handleErrorResponse(response: Record<string, unknown>, execute?: false): () => void;
  handleErrorResponse(response: Record<string, unknown>, execute = true) {
    let handler = () => {};

    if (isAuthorizationRequirementsError(response)) {
      handler = () => this.handleAuthorizationRequirementsError(response);
    }
    if (isConsentRequiredError(response)) {
      handler = () => this.handleConsentRequiredError(response);
    }
    if ('code' in response && response['code'] === 'AuthenticationFailed') {
      this.revoke();
    }
    return execute === true ? handler() : handler;
  }

  /**
   * Process a well-formed Authorization Requirements error response from a Globus service
   * and redirect the user to the Globus Auth login page with the necessary parameters.
   */
  handleAuthorizationRequirementsError(response: AuthorizationRequirementsError) {
    this.#transport = this.#buildTransport({
      params: {
        session_message: response.authorization_parameters.session_message,
        session_required_identities:
          response.authorization_parameters.session_required_identities.join(','),
        session_required_mfa: response.authorization_parameters.session_required_mfa,
        session_required_single_domain:
          response.authorization_parameters.session_required_single_domain.join(','),
        prompt: 'login',
      },
    });
    this.#transport.send();
  }

  /**
   * Process a well-formed `ConsentRequired` error response from a Globus service
   * and redirect the user to the Globus Auth login page with the necessary parameters.
   */
  handleConsentRequiredError(response: ConsentRequiredError) {
    this.#transport = this.#buildTransport({
      requested_scopes: response.required_scopes.join(' '),
    });
    this.#transport.send();
  }

  /**
   * Add a Globus Auth token response to storage, if `other_tokens` are present they are also added.
   * This method is mostly used internally by the `AuthorizationManager`, but can be used by downstream
   * consumers to add tokens to storage if necessary.
   */
  addTokenResponse = (token: Token | TokenResponse) => {
    getStorage().set(`${this.configuration.client_id}:${token.resource_server}`, token);
    if ('other_tokens' in token) {
      token.other_tokens.forEach(this.addTokenResponse);
    }
    this.#checkAuthorizationState();
  };

  /**
   * Call `AuthroizationManager.reset` and emit the `revoke` event.
   * @emits AuthorizationManager.events#revoke
   * @see AuthorizationManager.reset
   */
  async revoke() {
    this.reset();
    await this.events.revoke.dispatch();
  }
}
